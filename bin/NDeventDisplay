#!/bin/env python3

import h5py

from LarpixParser import event_parser as EvtParser
from LarpixParser.geom_to_dict import larpix_layout_to_dict
from LarpixParser import util

from NDeventDisplay import plotting, detector
from NDeventDisplay.utils import make_config

from tkinter import *

import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d.art3d as art3d
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,
                                               NavigationToolbar2Tk)

def main(args):
    config = make_config(args)

    f = h5py.File(args.infile, 'r')
    packets = f['packets']
    tracks = f['tracks']
    assn = f['mc_packets_assn']
    
    geom_dict = larpix_layout_to_dict(config['larpix_layout_name'],
                                      save_dict = False)
    run_config = util.get_run_config(config['detprop_name'],
                                     use_builtin = True)
    
    t0_grp = EvtParser.get_t0(packets)
    maxEventID = t0_grp.shape[0]
    
    window = Tk()

    window.title('ND Event Viewer')

    figWidth, figHeight = 640, 480
    dpi = args.dpi

    winWidth, winHeight = figWidth, figHeight+30

    window.geometry("x".join([str(winWidth), str(winHeight)]))

    fig = plt.figure(figsize=(figWidth/dpi, figHeight/dpi),
                     dpi = dpi)
    ax = fig.add_subplot(111, projection = '3d')

    draw_boundaries = BooleanVar()
    draw_boundaries.set(True)

    draw_packets = BooleanVar()
    draw_packets.set(True)
    
    draw_tracks = BooleanVar()
    draw_tracks.set(False)
    
    current_event = args.eventid

    canvas = FigureCanvasTkAgg(fig, master = window)
    canvas.draw()
    canvas.get_tk_widget().place(x = 0, y = 0)

    def draw_event():
        ax.clear()

        ax.set_xlabel(r'x [mm]')
        ax.set_ylabel(r'y [mm]')
        ax.set_zlabel(r'z [mm]')

        if draw_boundaries.get():
            plotting.draw_boundaries(ax, config)
        
        if draw_packets.get():
            plotting.plot_event(ax, packets, args.eventid, t0_grp,
                                geom_dict, run_config)

        if draw_tracks.get():
            plotting.plot_tracks(ax, packets, tracks, assn,
                                 args.eventid, t0_grp,
                                 geom_dict, run_config)

        box.delete(0, 'end')
        box.insert(END, str(args.eventid))

        canvas.draw()

    def goto_event(event):
        args.eventid = int(box.get())
        draw_event()

    def decrement_event(event):
        if args.eventid > 0:
            args.eventid -= 1
        draw_event()

    def increment_event(event):
        if args.eventid < maxEventID - 1:
            args.eventid += 1
        draw_event()

    box = Entry(width = 3)
    box.insert(END, str(args.eventid))
    box.place(x = figWidth/2 - 1.5 - 200, y = figHeight)

    btn_back = Button(text = "previous",
                      width = 5,
                      height = 1)
    btn_back.place(x = 1.*figWidth/3 - 10 - 200, y = figHeight)
    
    btn_next = Button(text = "next",
                      width = 5,
                      height = 1)
    btn_next.place(x = 2.*figWidth/3 - 10 - 200, y = figHeight)

    cPackets = Checkbutton(window, text = 'boundaries',
                           variable = draw_boundaries,
                           onvalue = True,
                           offvalue = False,
                           command = draw_event)
    cPackets.place(x = 2.*figWidth/3 - 100, y = figHeight)

    cPackets = Checkbutton(window, text = 'packets',
                           variable = draw_packets,
                           onvalue = True,
                           offvalue = False,
                           command = draw_event)
    cPackets.place(x = 2.*figWidth/3, y = figHeight)

    cTracks = Checkbutton(window, text = 'tracks',
                          variable = draw_tracks,
                          onvalue = True,
                          offvalue = False,
                          command = draw_event)
    cTracks.place(x = 2.*figWidth/3 + 100, y = figHeight)
        
    window.bind("<Return>", goto_event)
    window.bind("<Right>", increment_event)
    window.bind("<Left>", decrement_event)

    btn_back.bind("<Button-1>", decrement_event)
    btn_next.bind("<Button-1>", increment_event)

    draw_event()
    
    window.mainloop()
    
if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('infile', type = str,
                        help = "input LArPix file")
    parser.add_argument('-e', '--eventid', type = int,
                        default = 0,
                        help = "geometry layout pickle file")
    parser.add_argument('-l', '--pixellayout', type = str,
                        default = None,
                        help = "pixel layout yaml file")
    parser.add_argument('-p', '--detprop', type = str,
                        default = None,
                        help = "detector properties yaml file")
    parser.add_argument('-d', '--detector', type = str,
                        default = "ndlar",
                        help = "detector preset (\"NDLAr\" or \"Module0\")")
    parser.add_argument('--dpi', type = int,
                        default = 80,
                        help = "plot dpi")

    args = parser.parse_args()

    main(args)
