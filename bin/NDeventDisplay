#!/bin/env python3

import h5py

from LarpixParser import event_parser as EvtParser
from LarpixParser.geom_to_dict import multi_layout_to_dict_nopickle
from LarpixParser import util

from NDeventDisplay import plotting, detector
from NDeventDisplay.utils import make_config

from tkinter import *

import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d.art3d as art3d
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,
                                               NavigationToolbar2Tk)

def main(args):
    config = make_config(args)

    f = h5py.File(args.infile, 'r')
    packets = f['packets']
 
    geom_dict = multi_layout_to_dict_nopickle(config['pixel'],
                                              config['detprop'])
    run_config = util.get_run_config(config['detprop'])
    
    t0_grp = EvtParser.get_t0(packets)

    window = Tk()

    window.title('ND Event Viewer')

    window.geometry("500x500")

    fig = plt.figure()
    ax = fig.add_subplot(111, projection = '3d')    

    plotting.draw_boundaries(ax, config)

    plotting.plot_event(ax, packets, args.eventid, t0_grp,
                        geom_dict, run_config)

    canvas = FigureCanvasTkAgg(fig, master = window)
    canvas.draw()
    canvas.get_tk_widget().pack()

    toolbar = NavigationToolbar2Tk(canvas, window)
    toolbar.update()
    
    window.mainloop()
    
if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('infile', type = str,
                        help = "input LArPix file")
    parser.add_argument('-e', '--eventid', type = int,
                        default = 0,
                        help = "geometry layout pickle file")
    parser.add_argument('-l', '--pixellayout', type = str,
                        default = None,
                        help = "pixel layout yaml file")
    parser.add_argument('-p', '--detprop', type = str,
                        default = None,
                        help = "detector properties yaml file")
    parser.add_argument('-d', '--detector', type = str,
                        default = "ndlar",
                        help = "detector preset (\"NDLAr\" or \"Module0\")")

    args = parser.parse_args()

    main(args)
